configurations {
    kotlinRuntime
}

dependencies {
    kotlinRuntime "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
}

def kotlinClassPath = configurations.kotlinRuntime + sourceSets.main.runtimeClasspath

task AVarIsMutable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AVarIsMutableKt'
}

task AbstractClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractclasses.AbstractClassesKt'
}

task Adder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'interfaces.AdderKt'
}

task AddingIntToChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AddingIntToCharKt'
}

task AllOperators(type: JavaExec) {
    classpath kotlinClassPath
    main = 'operatoroverloading.AllOperatorsKt'
}

task AnUnchangingVar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnUnchangingVarKt'
}

task AnalyzingInput(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnalyzingInputKt'
}

task Animals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnimalsKt'
}

task AnnotatedJava(type: JavaExec) {
    classpath kotlinClassPath
    main = 'nullabilityannotations.AnnotatedJavaKt'
}

task AnonymousFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'anonymousFunctions.AnonymousFunctionKt'
}

task AnyFunImplementation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnyFunImplementationKt'
}

task AnyInstead(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introtogenerics.AnyInsteadKt'
}

task ApplyIfNotNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'libraryhelpers.ApplyIfNotNullKt'
}

task ApplyVsAlso(type: JavaExec) {
    classpath kotlinClassPath
    main = 'libraryhelpers.ApplyVsAlsoKt'
}

task Arg(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ArgKt'
}

task ArgumentOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'namedanddefaultargs1.ArgumentOrderKt'
}

task AssertTrue(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssertTrueKt'
}

task AssignAnonymous(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssignAnonymousKt'
}

task AssigningAnIf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssigningAnIfKt'
}

task AssignmentOperators(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssignmentOperatorsKt'
}

task AssociateBy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromliststomaps2.AssociateByKt'
}

task AuxiliaryInit(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseinit.AuxiliaryInitKt'
}

task AverageIncome(type: JavaExec) {
    classpath kotlinClassPath
    main = 'firstversion.AverageIncomeKt'
}

task AverageIncomeWithException(type: JavaExec) {
    classpath kotlinClassPath
    main = 'properexception.AverageIncomeWithExceptionKt'
}

task AverageIncomeWithNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withnull.AverageIncomeWithNullKt'
}

task BMI(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BMIKt'
}

task Backticks(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BackticksKt'
}

task BasicFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BasicFunctionsKt'
}

task BasicGenerics(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.BasicGenericsKt'
}

task BasicLogging(type: JavaExec) {
    classpath kotlinClassPath
    main = 'logging.BasicLoggingKt'
}

task BetterSuitcase(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BetterSuitcaseKt'
}

task BiggestLong(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BiggestLongKt'
}

task BmiWhen(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BmiWhenKt'
}

task BookExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BookExtensionsKt'
}

task Booleans(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BooleansKt'
}

task Booleans1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans1Kt'
}

task Booleans2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans2Kt'
}

task Booleans3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans3Kt'
}

task BuildString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BuildStringKt'
}

task BuildStringAndThis(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BuildStringAndThisKt'
}

task ByOperations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ByOperationsKt'
}

task CallStack(type: JavaExec) {
    classpath kotlinClassPath
    main = 'recursion.CallStackKt'
}

task CallTopLevelFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromjava.CallTopLevelFunction'
}

task Cat(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CatKt'
}

task CatchChecked(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CatchChecked'
}

task ChainedCalls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'safecalls.ChainedCallsKt'
}

task ChangingAVal(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ChangingAValKt'
}

task CharRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CharRangeKt'
}

task CheckingOptions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CheckingOptionsKt'
}

task ClassBodies(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClassBodiesKt'
}

task Cleanup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CleanupKt'
}

task Cleanup2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Cleanup2Kt'
}

task Closures(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClosuresKt'
}

task Closures2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Closures2Kt'
}

task Coffee(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CoffeeKt'
}

task ColorBlendMap2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'immutability.ColorBlendMap2Kt'
}

task ColorBlendTest(type: JavaExec) {
    classpath kotlinClassPath
    main = 'colorblendtest.ColorBlendTestKt'
}

task CompanionFactory(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects.CompanionFactoryKt'
}

task CompanionObject(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CompanionObjectKt'
}

task CompareDelayingTask(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CompareDelayingTaskKt'
}

task CompareSlowFib(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CompareSlowFibKt'
}

task CompareTo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'usingoperators.CompareToKt'
}

task ComputationResult(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ComputationResultKt'
}

task ConfusingOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ConfusingOperatorKt'
}

task ConstructorReference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences3.ConstructorReferenceKt'
}

task ContactMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ContactMapKt'
}

task Conversion(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ConversionKt'
}

task ConversionFailure(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ConversionFailureKt'
}

task Cookie(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CookieKt'
}

task CopyDataClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CopyDataClassKt'
}

task Counter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.CounterKt'
}

task CreatingLists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CreatingListsKt'
}

task Cup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CupKt'
}

task Cup2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Cup2Kt'
}

task CustomLabel(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CustomLabelKt'
}

task Data(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.DataKt'
}

task DataClassCopy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DataClassCopyKt'
}

task DataClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dataclasses.DataClassesKt'
}

task Declarations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'lambdawithreceiver.DeclarationsKt'
}

task Default(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefaultKt'
}

task DefiningExceptions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'toss.DefiningExceptionsKt'
}

task DefiningRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefiningRangesKt'
}

task Definition(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefinitionKt'
}

task DelegatedControls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DelegatedControlsKt'
}

task Dereference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceKt'
}

task DereferenceNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceNullKt'
}

task DestructuringData(type: JavaExec) {
    classpath kotlinClassPath
    main = 'usingoperators.DestructuringDataKt'
}

task DestructuringDuo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DestructuringDuoKt'
}

task DestructuringMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'usingoperators.DestructuringMapKt'
}

task Direction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.DirectionKt'
}

task DoWhile(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DoWhileKt'
}

task DoWhileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DoWhileLoopKt'
}

task Dog(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DogKt'
}

task EagerIteration(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EagerIterationKt'
}

task EagerVsLazyIteration(type: JavaExec) {
    classpath kotlinClassPath
    main = 'sequences.EagerVsLazyIterationKt'
}

task EasyKeys(type: JavaExec) {
    classpath kotlinClassPath
    main = 'hashing.EasyKeysKt'
}

task ElvisCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'elvisoperator.ElvisCallKt'
}

task ElvisOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ElvisOperatorKt'
}

task ElvisWithException(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ElvisWithExceptionKt'
}

task EmptyProgram(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EmptyProgramKt'
}

task EnumImport(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EnumImportKt'
}

task EvaluationOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EvaluationOrderKt'
}

task ExceptionHandlers(type: JavaExec) {
    classpath kotlinClassPath
    main = 'toss.ExceptionHandlersKt'
}

task ExplicitCheck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitCheckKt'
}

task ExplicitDelegation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitDelegationKt'
}

task ExplicitWording(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withfunction.ExplicitWordingKt'
}

task ExpressionInTemplate(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExpressionInTemplateKt'
}

task ExtensionsToJavaClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromkotlin.ExtensionsToJavaClassKt'
}

task Factorial(type: JavaExec) {
    classpath kotlinClassPath
    main = 'recursion.FactorialKt'
}

task FantasyGame(type: JavaExec) {
    classpath kotlinClassPath
    main = 'polymorphism.FantasyGameKt'
}

task FaultySuitcase(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FaultySuitcaseKt'
}

task Fibonacci(type: JavaExec) {
    classpath kotlinClassPath
    main = 'tailrecursion.FibonacciKt'
}

task FibonacciProperty(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FibonacciPropertyKt'
}

task FibonacciSequence(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FibonacciSequenceKt'
}

task Filter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FilterKt'
}

task FilterEven(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FilterEvenKt'
}

task FilterNotNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FilterNotNullKt'
}

task FilteringMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FilteringMapKt'
}

task FirstExample(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FirstExampleKt'
}

task Flatten(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FlattenKt'
}

task FlattenAndFlatMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FlattenAndFlatMapKt'
}

task FloatingPointRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FloatingPointRangeKt'
}

task FoldAndReduce(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FoldAndReduceKt'
}

task FoldRight(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FoldRightKt'
}

task FoldVsForLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FoldVsForLoopKt'
}

task ForEachLine(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForEachLineKt'
}

task ForIsAStatement(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForIsAStatementKt'
}

task ForLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForLoopKt'
}

task ForWithCharRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithCharRangeKt'
}

task ForWithRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithRangesKt'
}

task FullyQualify(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FullyQualifyKt'
}

task FunctionReference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences2.FunctionReferenceKt'
}

task FunctionTypeExamples(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FunctionTypeExamplesKt'
}

task GardenGnome(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GardenGnomeKt'
}

task GenericFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introtogenerics.GenericFunctionKt'
}

task GenericHolder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introtogenerics.GenericHolderKt'
}

task GenericListExt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'extensionproperties.GenericListExtKt'
}

task GenericListExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introtogenerics.GenericListExtensionsKt'
}

task GenericSpeakers(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.GenericSpeakersKt'
}

task GermanOrdinals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GermanOrdinalsKt'
}

task GetOrPut(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GetOrPutKt'
}

task GetValue(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GetValueKt'
}

task GoodAlien(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GoodAlienKt'
}

task GreatApe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'inheritance.GreatApeKt'
}

task GreatApe2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseinit.GreatApe2Kt'
}

task GreatApe3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GreatApe3Kt'
}

task GreaterThan2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GreaterThan2Kt'
}

task GroupBy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromliststomaps1.GroupByKt'
}

task GroupByVsFilter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GroupByVsFilterKt'
}

task GuaranteedCleanup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GuaranteedCleanupKt'
}

task Hamster(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HamsterKt'
}

task Hamsters(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.HamstersKt'
}

task HasChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HasCharKt'
}

task HashCodeFailure(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HashCodeFailureKt'
}

task Hello(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HelloKt'
}

task HelloCoroutines(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HelloCoroutinesKt'
}

task HelloWorld(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HelloWorldKt'
}

task HiddenArrayList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HiddenArrayListKt'
}

task If1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If1Kt'
}

task If2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If2Kt'
}

task If3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If3Kt'
}

task If4(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If4Kt'
}

task If5(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If5Kt'
}

task If6(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If6Kt'
}

task IfExpression(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfExpressionKt'
}

task IfResult(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfResultKt'
}

task ImmutableAndPlus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImmutableAndPlusKt'
}

task ImportClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportClassKt'
}

task ImportEverything(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportEverythingKt'
}

task ImportNameChange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportNameChangeKt'
}

task ImportPythagorean(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportPythagoreanKt'
}

task InString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InStringKt'
}

task IncrementOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IncrementOperatorKt'
}

task IndexIntoString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IndexIntoStringKt'
}

task Indices(type: JavaExec) {
    classpath kotlinClassPath
    main = 'extensionproperties.IndicesKt'
}

task InferInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferIntKt'
}

task Inference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferenceKt'
}

task InfiniteRecursion(type: JavaExec) {
    classpath kotlinClassPath
    main = 'recursion.InfiniteRecursionKt'
}

task Info(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InfoKt'
}

task InitSection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'primaryconstructor.InitSectionKt'
}

task InputCheck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InputCheckKt'
}

task InputLines1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InputLines1Kt'
}

task InputLines2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InputLines2Kt'
}

task IntDivisionTruncates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntDivisionTruncatesKt'
}

task IntRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntRangesKt'
}

task IntegerMath(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntegerMathKt'
}

task IntegerOverflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntegerOverflowKt'
}

task InterestingSessions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'anonymousFunctions.InterestingSessionsKt'
}

task InterfaceCollision(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InterfaceCollisionKt'
}

task IntroducingCapture(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntroducingCaptureKt'
}

task IntroducingNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntroducingNullKt'
}

task Invoke(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InvokeKt'
}

task Iterable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterableKt'
}

task IterateOverString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterateOverStringKt'
}

task Iteration(type: JavaExec) {
    classpath kotlinClassPath
    main = 'iteration.IterationKt'
}

task IterationVsMembership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterationVsMembershipKt'
}

task JavaChecked(type: JavaExec) {
    classpath kotlinClassPath
    main = 'JavaChecked'
}

task JavaList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'JavaListKt'
}

task JoinToString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'JoinToStringKt'
}

task JoiningToString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'JoiningToStringKt'
}

task JoiningToString2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'JoiningToString2Kt'
}

task KeyFailure(type: JavaExec) {
    classpath kotlinClassPath
    main = 'KeyFailureKt'
}

task KotlinChecked(type: JavaExec) {
    classpath kotlinClassPath
    main = 'KotlinCheckedKt'
}

task LabeledReturn(type: JavaExec) {
    classpath kotlinClassPath
    main = 'anonymousFunctions.LabeledReturnKt'
}

task LambdaAndNamedArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LambdaAndNamedArgsKt'
}

task LambdaIt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LambdaItKt'
}

task LambdaTypeInference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LambdaTypeInferenceKt'
}

task LaunchMany(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LaunchManyKt'
}

task LaunchManyTimed(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LaunchManyTimedKt'
}

task LazyInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LazyIntKt'
}

task LazySequence(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LazySequenceKt'
}

task LazySyntax(type: JavaExec) {
    classpath kotlinClassPath
    main = 'lazyinitialization.LazySyntaxKt'
}

task Let(type: JavaExec) {
    classpath kotlinClassPath
    main = 'libraryhelpers.LetKt'
}

task LetNotNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LetNotNullKt'
}

task Level(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.LevelKt'
}

task ListCollection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListCollectionKt'
}

task ListIndices(type: JavaExec) {
    classpath kotlinClassPath
    main = 'extensionproperties.ListIndicesKt'
}

task ListIndicesMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListIndicesMapKt'
}

task ListOf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListOfKt'
}

task ListUsefulFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListUsefulFunctionKt'
}

task Lists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListsKt'
}

task LocalExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LocalExtensionsKt'
}

task LogChanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LogChangesKt'
}

task LongConstants(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LongConstantsKt'
}

task MakeSalad(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromjava.MakeSalad'
}

task Mapping(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MappingKt'
}

task Maps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MapsKt'
}

task MatchingAgainstVals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MatchingAgainstValsKt'
}

task MemberImplementations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'interfaces4.MemberImplementationsKt'
}

task MemberOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'operatoroverloading.MemberOperatorKt'
}

task MemberVsExtension(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MemberVsExtensionKt'
}

task Membership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipKt'
}

task MembershipInRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipInRangeKt'
}

task MembershipUsingBounds(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipUsingBoundsKt'
}

task MixColors(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MixColorsKt'
}

task ModelingMI(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModelingMIKt'
}

task Modulus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModulusKt'
}

task Molecule(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MoleculeKt'
}

task MoreWork(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MoreWork'
}

task MultipleArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleArgsKt'
}

task MultipleListRefs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleListRefsKt'
}

task MultiplyByFour(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByFourKt'
}

task MultiplyByThree(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByThreeKt'
}

task MultiplyByTwo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByTwoKt'
}

task MutListIsList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutListIsListKt'
}

task MutableList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableListKt'
}

task MutableMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableMapsKt'
}

task MutableSet(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableSetKt'
}

task NPEOnPlatformType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NPEOnPlatformTypeKt'
}

task NamedAndDefaultArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'namedanddefaultargs2.NamedAndDefaultArgsKt'
}

task NamedArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'namedanddefaultargs1.NamedArgumentsKt'
}

task NamedCompanionObject(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedCompanionObjectKt'
}

task NewAngle(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NewAngleKt'
}

task NickName(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertydelegation.NickNameKt'
}

task NoComputationYet(type: JavaExec) {
    classpath kotlinClassPath
    main = 'sequences.NoComputationYetKt'
}

task NonNullAssert(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertKt'
}

task NonNullAssertCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertCallKt'
}

task NullInMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullInMapsKt'
}

task NullableFunctionType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableFunctionTypeKt'
}

task NullableInMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableInMapKt'
}

task NullableReceiver(type: JavaExec) {
    classpath kotlinClassPath
    main = 'libraryhelpers.NullableReceiverKt'
}

task NullableReturnType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableReturnTypeKt'
}

task NullableTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableTypesKt'
}

task Num(type: JavaExec) {
    classpath kotlinClassPath
    main = 'operatoroverloading.NumKt'
}

task NumberConversions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberConversionsKt'
}

task NumberSequence1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberSequence1Kt'
}

task NumberSequence2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberSequence2Kt'
}

task NumberTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberTypesKt'
}

task ObjectCounter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectCounterKt'
}

task ObjectFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectFunctionsKt'
}

task ObjectInheritance(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectInheritanceKt'
}

task ObjectKeyword(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectKeywordKt'
}

task ObjectNesting(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectNestingKt'
}

task ObjectProperty(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectPropertyKt'
}

task ObserveAnimals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObserveAnimalsKt'
}

task OmittingParentheses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OmittingParenthesesKt'
}

task OneOrTheOther(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OneOrTheOtherKt'
}

task OpOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OpOrderKt'
}

task OpOrderParens(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OpOrderParensKt'
}

task OperationsOnSets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OperationsOnSetsKt'
}

task OperatorPlus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OperatorPlusKt'
}

task OtherConstructors(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseinit.OtherConstructorsKt'
}

task OutOfBounds(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OutOfBoundsKt'
}

task Overflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverflowKt'
}

task Overloading(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingKt'
}

task OverloadingAdd(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingAddKt'
}

task PairDestructuring(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairDestructuringKt'
}

task PairOfLists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairOfListsKt'
}

task Pairs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairsKt'
}

task ParameterizedReturn(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ParameterizedReturnKt'
}

task ParameterizedTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ParameterizedTypesKt'
}

task Partition(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PartitionKt'
}

task Perform(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.PerformKt'
}

task Pets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'hashing.PetsKt'
}

task PlatformTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PlatformTypesKt'
}

task Postconditions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PostconditionsKt'
}

task PostfixVsPrefix(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PostfixVsPrefixKt'
}

task Predicates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PredicatesKt'
}

task PrintAlienSpieces(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PrintAlienSpiecesKt'
}

task PropertyInInterface(type: JavaExec) {
    classpath kotlinClassPath
    main = 'interfaces.PropertyInInterfaceKt'
}

task PropertyOptions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'lazyinitialization.PropertyOptionsKt'
}

task PropertyReference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences1.PropertyReferenceKt'
}

task Quote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'other.QuoteKt'
}

task Quoting(type: JavaExec) {
    classpath kotlinClassPath
    main = 'quoting.QuotingKt'
}

task Random(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RandomKt'
}

task RangeOfInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeOfIntKt'
}

task RangeSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeSumKt'
}

task ReadOnlyCollections(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadOnlyCollectionsKt'
}

task ReadOnlyMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadOnlyMapsKt'
}

task ReadTraceFile(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadTraceFileKt'
}

task ReadingName(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadingNameKt'
}

task ReadingNameWithIf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadingNameWithIfKt'
}

task ReceiverVsParameter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReceiverVsParameterKt'
}

task RecursionConstraints(type: JavaExec) {
    classpath kotlinClassPath
    main = 'recursion.RecursionConstraintsKt'
}

task RecursiveEnumImport(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.RecursiveEnumImportKt'
}

task References(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReferencesKt'
}

task RegularClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RegularClassesKt'
}

task RegularLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'regularLambda.RegularLambdaKt'
}

task RemoveDuplicates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RemoveDuplicatesKt'
}

task Repeat(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatKt'
}

task RepeatDeclaration(type: JavaExec) {
    classpath kotlinClassPath
    main = 'repeatdeclaration.RepeatDeclarationKt'
}

task RepeatExample(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatExampleKt'
}

task RepeatThreeTimes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatThreeTimesKt'
}

task RepeatVerbose(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatVerboseKt'
}

task RequireNotNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RequireNotNullKt'
}

task ResultOfApply(type: JavaExec) {
    classpath kotlinClassPath
    main = 'libraryhelpers.ResultOfApplyKt'
}

task ResultOfWith(type: JavaExec) {
    classpath kotlinClassPath
    main = 'libraryhelpers.ResultOfWithKt'
}

task ReturnFromFun(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReturnFromFunKt'
}

task ReturnFromHelperFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'anonymousFunctions.ReturnFromHelperFunctionsKt'
}

task ReturnFromLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReturnFromLambdaKt'
}

task RigidHolder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introtogenerics.RigidHolderKt'
}

task STUB(type: JavaExec) {
    classpath kotlinClassPath
    main = 'STUBKt'
}

task SafeCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'safecalls.SafeCallKt'
}

task SafeOperation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SafeOperationKt'
}

task SayHello(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SayHelloKt'
}

task SealedClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'sealedclasses.SealedClassesKt'
}

task Sets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SetsKt'
}

task SimilarOperation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimilarOperationKt'
}

task Simple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleKt'
}

task SimpleHashing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleHashingKt'
}

task SimpleLoggingStrategy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'logging.SimpleLoggingStrategyKt'
}

task SimpleOperation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleOperationKt'
}

task SmartCasts(type: JavaExec) {
    classpath kotlinClassPath
    main = 'smartcasts.SmartCastsKt'
}

task Solid(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SolidKt'
}

task SortWith(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences1.SortWithKt'
}

task Speakers(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.SpeakersKt'
}

task SpreadOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SpreadOperatorKt'
}

task StateOfAClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StateOfAClassKt'
}

task StoringLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StoringLambdaKt'
}

task StrTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrTemplatesKt'
}

task StrangeQuote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrangeQuoteKt'
}

task StringBuilder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringBuilderKt'
}

task StringConcatenation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringConcatenationKt'
}

task StringHashCode(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringHashCodeKt'
}

task StringIndices(type: JavaExec) {
    classpath kotlinClassPath
    main = 'extensionproperties.StringIndicesKt'
}

task StringInvoke(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringInvokeKt'
}

task StringIsNullOr(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringIsNullOrKt'
}

task StringIteration(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringIterationKt'
}

task StringPlusNumber(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringPlusNumberKt'
}

task StringRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringRangeKt'
}

task StringTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringTemplatesKt'
}

task Strings(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringsKt'
}

task Suitcase(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SuitcaseKt'
}

task Sum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumKt'
}

task SumUsingRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumUsingRangeKt'
}

task SumViaFold(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumViaFoldKt'
}

task Swearing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SwearingKt'
}

task TDDFail(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing1.TDDFailKt'
}

task TDDStillFails(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing2.TDDStillFailsKt'
}

task TDDWorks(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing3.TDDWorksKt'
}

task TailRecursiveSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'tailrecursion.TailRecursiveSumKt'
}

task TakeIfDeclaration(type: JavaExec) {
    classpath kotlinClassPath
    main = 'takeIfDeclaration.TakeIfDeclarationKt'
}

task TakeOrDrop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TakeOrDropKt'
}

task Team(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TeamKt'
}

task TeamWithTraditions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TeamWithTraditionsKt'
}

task Temperature(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TemperatureKt'
}

task TerminalOperations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'sequences.TerminalOperationsKt'
}

task TestingExample(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TestingExampleKt'
}

task ThreeQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ThreeQuotesKt'
}

task TicTacToe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TicTacToeKt'
}

task ToIntException(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ToIntExceptionKt'
}

task ToIntException2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ToIntException2Kt'
}

task TopLevelFunctionRef(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences2.TopLevelFunctionRefKt'
}

task TransformingMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TransformingMapKt'
}

task TrimMargin(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TrimMarginKt'
}

task TripleQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TripleQuotesKt'
}

task TrueOrFalse(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TrueOrFalseKt'
}

task Truncation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TruncationKt'
}

task TryFinally(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TryFinallyKt'
}

task Tuple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'destructuring.TupleKt'
}

task TwoArgLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoArgLambdaKt'
}

task TwoFunctionsWithVarargs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoFunctionsWithVarargsKt'
}

task Types(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TypesKt'
}

task Underscore(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnderscoreKt'
}

task Unexpected(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnexpectedKt'
}

task UnitReturn(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnitReturnKt'
}

task UnitReturnType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnitReturnTypeKt'
}

task UnpredictableHashing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnpredictableHashingKt'
}

task Usable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsableKt'
}

task UseALibrary(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UseALibraryKt'
}

task UseAtomicLog(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UseAtomicLogKt'
}

task UseBeanClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UseBeanClassKt'
}

task UsingAtomicTest(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingAtomicTestKt'
}

task UsingDataClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromjava.UsingDataClass'
}

task UsingKotlinClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromjava.UsingKotlinClass'
}

task UsingLongs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingLongsKt'
}

task UsingTODO(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingTODOKt'
}

task UsingWith(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withfunction.UsingWithKt'
}

task Vals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ValsKt'
}

task ValueFromMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ValueFromMapKt'
}

task VarargLikeList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarargLikeListKt'
}

task VarargSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarargSumKt'
}

task VariableArgLists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VariableArgListsKt'
}

task Vars(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarsKt'
}

task VerySlowFibonacci(type: JavaExec) {
    classpath kotlinClassPath
    main = 'slowfibonacci.VerySlowFibonacciKt'
}

task VisibleArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VisibleArgsKt'
}

task WhenAndSmartCasts(type: JavaExec) {
    classpath kotlinClassPath
    main = 'smartcasts.WhenAndSmartCastsKt'
}

task While(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhileKt'
}

task WhileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhileLoopKt'
}

task WhyFlatMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'manipulatinglists.WhyFlatMapKt'
}

task WithCleanup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withfunction.WithCleanupKt'
}

task WithDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WithDefaultArgumentsKt'
}

task WithoutDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WithoutDefaultArgumentsKt'
}

task ZipAndTransform(type: JavaExec) {
    classpath kotlinClassPath
    main = 'manipulatinglists.ZipAndTransformKt'
}

task Zipper(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ZipperKt'
}

task ZippingWithNext(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ZippingWithNextKt'
}

task run (dependsOn: [
    'AVarIsMutable',
    'AbstractClasses',
    'Adder',
    'AddingIntToChar',
    'AllOperators',
    'AnUnchangingVar',
    'AnalyzingInput',
    'Animals',
    'AnnotatedJava',
    'AnonymousFunction',
    'AnyFunImplementation',
    'AnyInstead',
    'ApplyIfNotNull',
    'ApplyVsAlso',
    'Arg',
    'ArgumentOrder',
    'AssertTrue',
    'AssignAnonymous',
    'AssigningAnIf',
    'AssignmentOperators',
    'AssociateBy',
    'AuxiliaryInit',
    'AverageIncome',
    'AverageIncomeWithException',
    'AverageIncomeWithNull',
    'BMI',
    'Backticks',
    'BasicFunctions',
    'BasicGenerics',
    'BasicLogging',
    'BetterSuitcase',
    'BiggestLong',
    'BmiWhen',
    'BookExtensions',
    'Booleans',
    'Booleans1',
    'Booleans2',
    'Booleans3',
    'BuildString',
    'BuildStringAndThis',
    'ByOperations',
    'CallStack',
    'CallTopLevelFunction',
    'Cat',
    'CatchChecked',
    'ChainedCalls',
    'ChangingAVal',
    'CharRange',
    'CheckingOptions',
    'ClassBodies',
    'Cleanup',
    'Cleanup2',
    'Closures',
    'Closures2',
    'Coffee',
    'ColorBlendMap2',
    'ColorBlendTest',
    'CompanionFactory',
    'CompanionObject',
    'CompareDelayingTask',
    'CompareSlowFib',
    'CompareTo',
    'ComputationResult',
    'ConfusingOperator',
    'ConstructorReference',
    'ContactMap',
    'Conversion',
    'ConversionFailure',
    'Cookie',
    'CopyDataClass',
    'Counter',
    'CreatingLists',
    'Cup',
    'Cup2',
    'CustomLabel',
    'Data',
    'DataClassCopy',
    'DataClasses',
    'Declarations',
    'Default',
    'DefiningExceptions',
    'DefiningRanges',
    'Definition',
    'DelegatedControls',
    'Dereference',
    'DereferenceNull',
    'DestructuringData',
    'DestructuringDuo',
    'DestructuringMap',
    'Direction',
    'DoWhile',
    'DoWhileLoop',
    'Dog',
    'EagerIteration',
    'EagerVsLazyIteration',
    'EasyKeys',
    'ElvisCall',
    'ElvisOperator',
    'ElvisWithException',
    'EmptyProgram',
    'EnumImport',
    'EvaluationOrder',
    'ExceptionHandlers',
    'ExplicitCheck',
    'ExplicitDelegation',
    'ExplicitWording',
    'ExpressionInTemplate',
    'ExtensionsToJavaClass',
    'Factorial',
    'FantasyGame',
    'FaultySuitcase',
    'Fibonacci',
    'FibonacciProperty',
    'FibonacciSequence',
    'Filter',
    'FilterEven',
    'FilterNotNull',
    'FilteringMap',
    'FirstExample',
    'Flatten',
    'FlattenAndFlatMap',
    'FloatingPointRange',
    'FoldAndReduce',
    'FoldRight',
    'FoldVsForLoop',
    'ForEachLine',
    'ForIsAStatement',
    'ForLoop',
    'ForWithCharRange',
    'ForWithRanges',
    'FullyQualify',
    'FunctionReference',
    'FunctionTypeExamples',
    'GardenGnome',
    'GenericFunction',
    'GenericHolder',
    'GenericListExt',
    'GenericListExtensions',
    'GenericSpeakers',
    'GermanOrdinals',
    'GetOrPut',
    'GetValue',
    'GoodAlien',
    'GreatApe',
    'GreatApe2',
    'GreatApe3',
    'GreaterThan2',
    'GroupBy',
    'GroupByVsFilter',
    'GuaranteedCleanup',
    'Hamster',
    'Hamsters',
    'HasChar',
    'HashCodeFailure',
    'Hello',
    'HelloCoroutines',
    'HelloWorld',
    'HiddenArrayList',
    'If1',
    'If2',
    'If3',
    'If4',
    'If5',
    'If6',
    'IfExpression',
    'IfResult',
    'ImmutableAndPlus',
    'ImportClass',
    'ImportEverything',
    'ImportNameChange',
    'ImportPythagorean',
    'InString',
    'IncrementOperator',
    'IndexIntoString',
    'Indices',
    'InferInt',
    'Inference',
    'InfiniteRecursion',
    'Info',
    'InitSection',
    'InputCheck',
    'InputLines1',
    'InputLines2',
    'IntDivisionTruncates',
    'IntRanges',
    'IntegerMath',
    'IntegerOverflow',
    'InterestingSessions',
    'InterfaceCollision',
    'IntroducingCapture',
    'IntroducingNull',
    'Invoke',
    'Iterable',
    'IterateOverString',
    'Iteration',
    'IterationVsMembership',
    'JavaChecked',
    'JavaList',
    'JoinToString',
    'JoiningToString',
    'JoiningToString2',
    'KeyFailure',
    'KotlinChecked',
    'LabeledReturn',
    'LambdaAndNamedArgs',
    'LambdaIt',
    'LambdaTypeInference',
    'LaunchMany',
    'LaunchManyTimed',
    'LazyInt',
    'LazySequence',
    'LazySyntax',
    'Let',
    'LetNotNull',
    'Level',
    'ListCollection',
    'ListIndices',
    'ListIndicesMap',
    'ListOf',
    'ListUsefulFunction',
    'Lists',
    'LocalExtensions',
    'LogChanges',
    'LongConstants',
    'MakeSalad',
    'Mapping',
    'Maps',
    'MatchingAgainstVals',
    'MemberImplementations',
    'MemberOperator',
    'MemberVsExtension',
    'Membership',
    'MembershipInRange',
    'MembershipUsingBounds',
    'MixColors',
    'ModelingMI',
    'Modulus',
    'Molecule',
    'MoreWork',
    'MultipleArgs',
    'MultipleListRefs',
    'MultiplyByFour',
    'MultiplyByThree',
    'MultiplyByTwo',
    'MutListIsList',
    'MutableList',
    'MutableMaps',
    'MutableSet',
    'NPEOnPlatformType',
    'NamedAndDefaultArgs',
    'NamedArguments',
    'NamedCompanionObject',
    'NewAngle',
    'NickName',
    'NoComputationYet',
    'NonNullAssert',
    'NonNullAssertCall',
    'NullInMaps',
    'NullableFunctionType',
    'NullableInMap',
    'NullableReceiver',
    'NullableReturnType',
    'NullableTypes',
    'Num',
    'NumberConversions',
    'NumberSequence1',
    'NumberSequence2',
    'NumberTypes',
    'ObjectCounter',
    'ObjectFunctions',
    'ObjectInheritance',
    'ObjectKeyword',
    'ObjectNesting',
    'ObjectProperty',
    'ObserveAnimals',
    'OmittingParentheses',
    'OneOrTheOther',
    'OpOrder',
    'OpOrderParens',
    'OperationsOnSets',
    'OperatorPlus',
    'OtherConstructors',
    'OutOfBounds',
    'Overflow',
    'Overloading',
    'OverloadingAdd',
    'PairDestructuring',
    'PairOfLists',
    'Pairs',
    'ParameterizedReturn',
    'ParameterizedTypes',
    'Partition',
    'Perform',
    'Pets',
    'PlatformTypes',
    'Postconditions',
    'PostfixVsPrefix',
    'Predicates',
    'PrintAlienSpieces',
    'PropertyInInterface',
    'PropertyOptions',
    'PropertyReference',
    'Quote',
    'Quoting',
    'Random',
    'RangeOfInt',
    'RangeSum',
    'ReadOnlyCollections',
    'ReadOnlyMaps',
    'ReadTraceFile',
    'ReadingName',
    'ReadingNameWithIf',
    'ReceiverVsParameter',
    'RecursionConstraints',
    'RecursiveEnumImport',
    'References',
    'RegularClasses',
    'RegularLambda',
    'RemoveDuplicates',
    'Repeat',
    'RepeatDeclaration',
    'RepeatExample',
    'RepeatThreeTimes',
    'RepeatVerbose',
    'RequireNotNull',
    'ResultOfApply',
    'ResultOfWith',
    'ReturnFromFun',
    'ReturnFromHelperFunctions',
    'ReturnFromLambda',
    'RigidHolder',
    'STUB',
    'SafeCall',
    'SafeOperation',
    'SayHello',
    'SealedClasses',
    'Sets',
    'SimilarOperation',
    'Simple',
    'SimpleHashing',
    'SimpleLoggingStrategy',
    'SimpleOperation',
    'SmartCasts',
    'Solid',
    'SortWith',
    'Speakers',
    'SpreadOperator',
    'StateOfAClass',
    'StoringLambda',
    'StrTemplates',
    'StrangeQuote',
    'StringBuilder',
    'StringConcatenation',
    'StringHashCode',
    'StringIndices',
    'StringInvoke',
    'StringIsNullOr',
    'StringIteration',
    'StringPlusNumber',
    'StringRange',
    'StringTemplates',
    'Strings',
    'Suitcase',
    'Sum',
    'SumUsingRange',
    'SumViaFold',
    'Swearing',
    'TDDFail',
    'TDDStillFails',
    'TDDWorks',
    'TailRecursiveSum',
    'TakeIfDeclaration',
    'TakeOrDrop',
    'Team',
    'TeamWithTraditions',
    'Temperature',
    'TerminalOperations',
    'TestingExample',
    'ThreeQuotes',
    'TicTacToe',
    'ToIntException',
    'ToIntException2',
    'TopLevelFunctionRef',
    'TransformingMap',
    'TrimMargin',
    'TripleQuotes',
    'TrueOrFalse',
    'Truncation',
    'TryFinally',
    'Tuple',
    'TwoArgLambda',
    'TwoFunctionsWithVarargs',
    'Types',
    'Underscore',
    'Unexpected',
    'UnitReturn',
    'UnitReturnType',
    'UnpredictableHashing',
    'Usable',
    'UseALibrary',
    'UseAtomicLog',
    'UseBeanClass',
    'UsingAtomicTest',
    'UsingDataClass',
    'UsingKotlinClass',
    'UsingLongs',
    'UsingTODO',
    'UsingWith',
    'Vals',
    'ValueFromMap',
    'VarargLikeList',
    'VarargSum',
    'VariableArgLists',
    'Vars',
    'VerySlowFibonacci',
    'VisibleArgs',
    'WhenAndSmartCasts',
    'While',
    'WhileLoop',
    'WhyFlatMap',
    'WithCleanup',
    'WithDefaultArguments',
    'WithoutDefaultArguments',
    'ZipAndTransform',
    'Zipper',
    'ZippingWithNext'
    ]) {
    doLast {
        println '*** run complete ***'
    }
}
