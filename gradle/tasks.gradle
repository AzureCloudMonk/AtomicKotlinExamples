configurations {
    kotlinRuntime
}

dependencies {
    kotlinRuntime "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
}

def kotlinClassPath = configurations.kotlinRuntime + sourceSets.main.runtimeClasspath

task AbstractClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractcasses.AbstractClassesKt'
}

task Adder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'interfaces.AdderKt'
}

task AddingIntToChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AddingIntToCharKt'
}

task AllOperators(type: JavaExec) {
    classpath kotlinClassPath
    main = 'operators.AllOperatorsKt'
}

task AnUnchangingVar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnUnchangingVarKt'
}

task Animals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnimalsKt'
}

task AnonymousFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnonymousFunctionKt'
}

task ArgumentOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ArgumentOrderKt'
}

task AssertTrue(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssertTrueKt'
}

task AssigningAnIf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssigningAnIfKt'
}

task AuxiliaryInitialization(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AuxiliaryInitializationKt'
}

task BMI(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BMIKt'
}

task Backticks(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BackticksKt'
}

task BasicFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BasicFunctionsKt'
}

task BetterSurrey(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BetterSurreyKt'
}

task Bicycle(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BicycleKt'
}

task BiggestLong(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BiggestLongKt'
}

task BookExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BookExtensionsKt'
}

task Booleans(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BooleansKt'
}

task Booleans1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans1Kt'
}

task Booleans2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans2Kt'
}

task Booleans3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans3Kt'
}

task CallLater(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CallLaterKt'
}

task CallOtherConstructors(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.CallOtherConstructorsKt'
}

task Cat(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CatKt'
}

task ChainedCalls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ChainedCallsKt'
}

task ChangingAVal(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ChangingAValKt'
}

task CharRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CharRangeKt'
}

task ClassArg(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClassArgKt'
}

task ClassBodies(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClassBodiesKt'
}

task Coffee(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CoffeeKt'
}

task ColorBlendMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'colorblendmap.ColorBlendMapKt'
}

task ColorBlendMap2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'immutability.ColorBlendMap2Kt'
}

task ColorBlendTest(type: JavaExec) {
    classpath kotlinClassPath
    main = 'colorblendtest.ColorBlendTestKt'
}

task CompanionFactory(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companions.CompanionFactoryKt'
}

task CompanionObject(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CompanionObjectKt'
}

task CompareTo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'usingoperators.CompareToKt'
}

task ComputationResult(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ComputationResultKt'
}

task ContactMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ContactMapKt'
}

task ContainsChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ContainsCharKt'
}

task ConversionFailure(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ConversionFailureKt'
}

task Cookie(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CookieKt'
}

task CopyDataClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CopyDataClassKt'
}

task Cup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CupKt'
}

task Cup2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Cup2Kt'
}

task Data(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.DataKt'
}

task DataClassCopy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DataClassCopyKt'
}

task DataClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dataclasses.DataClassesKt'
}

task Default(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefaultKt'
}

task DefiningRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefiningRangesKt'
}

task Definition(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefinitionKt'
}

task DelegatedControls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DelegatedControlsKt'
}

task Dereference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceKt'
}

task DereferenceNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceNullKt'
}

task DestructuringData(type: JavaExec) {
    classpath kotlinClassPath
    main = 'usingoperators.DestructuringDataKt'
}

task DestructuringDuo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DestructuringDuoKt'
}

task DifferentReferencesToList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'readonlyandmutable.DifferentReferencesToListKt'
}

task DisplayDuck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayDuckKt'
}

task DisplayList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayListKt'
}

task DisplayListBlemish(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayListBlemishKt'
}

task DisplayListMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayListMapKt'
}

task DisplayListWithLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayListWithLambdaKt'
}

task DivZero(type: JavaExec) {
    classpath kotlinClassPath
    main = 'exceptions.DivZeroKt'
}

task DivZero2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DivZero2Kt'
}

task DoWhileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DoWhileLoopKt'
}

task Dog(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DogKt'
}

task DuckForEach(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DuckForEachKt'
}

task EasyKeys(type: JavaExec) {
    classpath kotlinClassPath
    main = 'hashing.EasyKeysKt'
}

task ElvisCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ElvisCallKt'
}

task ElvisOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ElvisOperatorKt'
}

task EmptyProgram(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EmptyProgramKt'
}

task EnumImport(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EnumImportKt'
}

task EvaluationOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EvaluationOrderKt'
}

task ExplicitCheck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitCheckKt'
}

task ExplicitDelegation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitDelegationKt'
}

task ExpressionInStringTemplate(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExpressionInStringTemplateKt'
}

task FantasyGame(type: JavaExec) {
    classpath kotlinClassPath
    main = 'polymorphism.FantasyGameKt'
}

task FloatingPointRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FloatingPointRangeKt'
}

task ForLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForLoopKt'
}

task ForLoopIsAStatement(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForLoopIsAStatementKt'
}

task ForWithCharRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithCharRangeKt'
}

task ForWithRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithRangesKt'
}

task FormatLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FormatLambdaKt'
}

task FullyQualify(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FullyQualifyKt'
}

task GardenGnome(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GardenGnomeKt'
}

task GreatApe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'inheritance.GreatApeKt'
}

task GreatApe2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.GreatApe2Kt'
}

task GreatApe3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GreatApe3Kt'
}

task GuaranteedCleanup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GuaranteedCleanupKt'
}

task Hamster(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HamsterKt'
}

task Hamsters(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.HamstersKt'
}

task HashCodeFailure(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HashCodeFailureKt'
}

task HelloWorld(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HelloWorldKt'
}

task HiddenArrayList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HiddenArrayListKt'
}

task If1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If1Kt'
}

task If2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If2Kt'
}

task If3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If3Kt'
}

task If4(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If4Kt'
}

task If5(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If5Kt'
}

task If6(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If6Kt'
}

task IfExpression(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfExpressionKt'
}

task IfResult(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfResultKt'
}

task ImmutableAndPlus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImmutableAndPlusKt'
}

task ImportClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportClassKt'
}

task ImportEverything(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportEverythingKt'
}

task ImportLevel(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportLevelKt'
}

task ImportMultiple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportMultipleKt'
}

task ImportNameChange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportNameChangeKt'
}

task ImportPythagorean(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportPythagoreanKt'
}

task InString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InStringKt'
}

task IndexIntoString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IndexIntoStringKt'
}

task IndexWithZip(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IndexWithZipKt'
}

task InferInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferIntKt'
}

task Inference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferenceKt'
}

task InitSection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'constructors.InitSectionKt'
}

task InputCheck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InputCheckKt'
}

task IntDivisionTruncates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntDivisionTruncatesKt'
}

task IntRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntRangeKt'
}

task IntRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntRangesKt'
}

task IntegerMath(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntegerMathKt'
}

task IntegerOverflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntegerOverflowKt'
}

task InterfaceCollision(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InterfaceCollisionKt'
}

task Invoke(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InvokeKt'
}

task IterateOverString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterateOverStringKt'
}

task IterateThroughString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterateThroughStringKt'
}

task IterationVsMembership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterationVsMembershipKt'
}

task KeyFailure(type: JavaExec) {
    classpath kotlinClassPath
    main = 'KeyFailureKt'
}

task LambdaIt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LambdaItKt'
}

task LambdaTypeInference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LambdaTypeInferenceKt'
}

task Level(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.LevelKt'
}

task ListCollection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListCollectionKt'
}

task ListOf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListOfKt'
}

task Lists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListsKt'
}

task LocalExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LocalExtensionsKt'
}

task LocalFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LocalFunctionsKt'
}

task LogChanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LogChangesKt'
}

task Maps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MapsKt'
}

task MemberImplementations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'interfaces4.MemberImplementationsKt'
}

task MemberOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'operators.MemberOperatorKt'
}

task MemberVsExtension(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MemberVsExtensionKt'
}

task MembershipInRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipInRangeKt'
}

task MembershipUsingBounds(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipUsingBoundsKt'
}

task ModelingMI(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModelingMIKt'
}

task Modulus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModulusKt'
}

task Molecule(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MoleculeKt'
}

task MoreReduce(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MoreReduceKt'
}

task MultipleClassArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleClassArgsKt'
}

task MultipleExceptions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleExceptionsKt'
}

task MultiplyByFour(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByFourKt'
}

task MultiplyByThree(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByThreeKt'
}

task MultiplyByTwo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByTwoKt'
}

task MutableList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableListKt'
}

task MutableListIsList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'readonlyandmutable.MutableListIsListKt'
}

task MutableMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableMapsKt'
}

task MutableSet(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableSetKt'
}

task MutableVariable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableVariableKt'
}

task NamedAndDefaultArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedAndDefaultArgsKt'
}

task NamedArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedArgumentsKt'
}

task NamedCompanionObject(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedCompanionObjectKt'
}

task NewAngle(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NewAngleKt'
}

task NonNullAssert(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertKt'
}

task NonNullAssertCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertCallKt'
}

task NullDereference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullDereferenceKt'
}

task NullInMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullInMapsKt'
}

task NullableTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableTypesKt'
}

task Num(type: JavaExec) {
    classpath kotlinClassPath
    main = 'operators.NumKt'
}

task NumberTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberTypesKt'
}

task ObjectCounter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectCounterKt'
}

task ObjectFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectFunctionsKt'
}

task ObjectInheritance(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectInheritanceKt'
}

task ObjectKeyword(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectKeywordKt'
}

task ObjectNesting(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectNestingKt'
}

task ObjectProperty(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectPropertyKt'
}

task ObserveAnimals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObserveAnimalsKt'
}

task OneOrTheOther(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OneOrTheOtherKt'
}

task OperatorPlus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OperatorPlusKt'
}

task Overflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverflowKt'
}

task Overloading(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingKt'
}

task OverloadingAdd(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingAddKt'
}

task PairDestructuring(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairDestructuringKt'
}

task Pairs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairsKt'
}

task ParameterizedReturnTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'parameterizedtypes.ParameterizedReturnTypesKt'
}

task ParameterizedTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'parameterizedtypes.ParameterizedTypesKt'
}

task Pets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'hashing.PetsKt'
}

task PropertyInInterface(type: JavaExec) {
    classpath kotlinClassPath
    main = 'interfaces.PropertyInInterfaceKt'
}

task Quote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'other.QuoteKt'
}

task Quoting(type: JavaExec) {
    classpath kotlinClassPath
    main = 'quoting.QuotingKt'
}

task RangeMembership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeMembershipKt'
}

task RangeSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeSumKt'
}

task ReadOnlyMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadOnlyMapsKt'
}

task RecursiveEnumImport(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.RecursiveEnumImportKt'
}

task Reduce(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReduceKt'
}

task References(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReferencesKt'
}

task RegularClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RegularClassesKt'
}

task RemoveDuplicates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RemoveDuplicatesKt'
}

task RemoveNulls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RemoveNullsKt'
}

task RepeatThreeTimes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatThreeTimesKt'
}

task ST(type: JavaExec) {
    classpath kotlinClassPath
    main = 'STKt'
}

task SafeCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SafeCallKt'
}

task SafeOperation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SafeOperationKt'
}

task SayHello(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SayHelloKt'
}

task SealedClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'sealedclasses.SealedClassesKt'
}

task Sets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SetsKt'
}

task Simple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleKt'
}

task SimpleHashing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleHashingKt'
}

task SimpleMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleMapKt'
}

task SmartCasts(type: JavaExec) {
    classpath kotlinClassPath
    main = 'smartcasts.SmartCastsKt'
}

task SpreadOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SpreadOperatorKt'
}

task StateOfAClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StateOfAClassKt'
}

task StrTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrTemplatesKt'
}

task StrangeQuote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrangeQuoteKt'
}

task StringConcatenation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringConcatenationKt'
}

task StringHashCode(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringHashCodeKt'
}

task StringInvoke(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringInvokeKt'
}

task StringIsNullOr(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringIsNullOrKt'
}

task StringPlusNumber(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringPlusNumberKt'
}

task StringRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringRangeKt'
}

task StringTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringTemplatesKt'
}

task SumUsingRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumUsingRangeKt'
}

task Surrey(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SurreyKt'
}

task Swearing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SwearingKt'
}

task TDDFail(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing1.TDDFailKt'
}

task TDDStillFails(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing2.TDDStillFailsKt'
}

task TDDWorks(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing3.TDDWorksKt'
}

task Temperature(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TemperatureKt'
}

task TestingExample(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TestingExampleKt'
}

task ThreeQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ThreeQuotesKt'
}

task TicTacToe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TicTacToeKt'
}

task Toss(type: JavaExec) {
    classpath kotlinClassPath
    main = 'toss.TossKt'
}

task TripleQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TripleQuotesKt'
}

task TrueOrFalse(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TrueOrFalseKt'
}

task Truncation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TruncationKt'
}

task TryFinally(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TryFinallyKt'
}

task Tuple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'destructuring.TupleKt'
}

task TwoArgLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoArgLambdaKt'
}

task TwoFunctionsWithVarargs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoFunctionsWithVarargsKt'
}

task Types(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TypesKt'
}

task Unexpected(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnexpectedKt'
}

task UnitReturn(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnitReturnKt'
}

task UnitReturnType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnitReturnTypeKt'
}

task UnpredictableHashing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnpredictableHashingKt'
}

task UseALibrary(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UseALibraryKt'
}

task UsingAtomicTest(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingAtomicTestKt'
}

task UsingLongs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingLongsKt'
}

task Vals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ValsKt'
}

task ValueFromMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ValueFromMapKt'
}

task VarargListMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarargListMapKt'
}

task VarargSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarargSumKt'
}

task VariableArgLists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VariableArgListsKt'
}

task Vars(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarsKt'
}

task VisibleClassArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VisibleClassArgsKt'
}

task WhenAndSmartCasts(type: JavaExec) {
    classpath kotlinClassPath
    main = 'smartcasts.WhenAndSmartCastsKt'
}

task WhenExpressions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhenExpressionsKt'
}

task WhileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhileLoopKt'
}

task WithDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WithDefaultArgumentsKt'
}

task WithoutDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WithoutDefaultArgumentsKt'
}

task ZipMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'zipping.ZipMapKt'
}

task Zipper(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ZipperKt'
}

task run (dependsOn: [
    'AbstractClasses',
    'Adder',
    'AddingIntToChar',
    'AllOperators',
    'AnUnchangingVar',
    'Animals',
    'AnonymousFunction',
    'ArgumentOrder',
    'AssertTrue',
    'AssigningAnIf',
    'AuxiliaryInitialization',
    'BMI',
    'Backticks',
    'BasicFunctions',
    'BetterSurrey',
    'Bicycle',
    'BiggestLong',
    'BookExtensions',
    'Booleans',
    'Booleans1',
    'Booleans2',
    'Booleans3',
    'CallLater',
    'CallOtherConstructors',
    'Cat',
    'ChainedCalls',
    'ChangingAVal',
    'CharRange',
    'ClassArg',
    'ClassBodies',
    'Coffee',
    'ColorBlendMap',
    'ColorBlendMap2',
    'ColorBlendTest',
    'CompanionFactory',
    'CompanionObject',
    'CompareTo',
    'ComputationResult',
    'ContactMap',
    'ContainsChar',
    'ConversionFailure',
    'Cookie',
    'CopyDataClass',
    'Cup',
    'Cup2',
    'Data',
    'DataClassCopy',
    'DataClasses',
    'Default',
    'DefiningRanges',
    'Definition',
    'DelegatedControls',
    'Dereference',
    'DereferenceNull',
    'DestructuringData',
    'DestructuringDuo',
    'DifferentReferencesToList',
    'DisplayDuck',
    'DisplayList',
    'DisplayListBlemish',
    'DisplayListMap',
    'DisplayListWithLambda',
    'DivZero',
    'DivZero2',
    'DoWhileLoop',
    'Dog',
    'DuckForEach',
    'EasyKeys',
    'ElvisCall',
    'ElvisOperator',
    'EmptyProgram',
    'EnumImport',
    'EvaluationOrder',
    'ExplicitCheck',
    'ExplicitDelegation',
    'ExpressionInStringTemplate',
    'FantasyGame',
    'FloatingPointRange',
    'ForLoop',
    'ForLoopIsAStatement',
    'ForWithCharRange',
    'ForWithRanges',
    'FormatLambda',
    'FullyQualify',
    'GardenGnome',
    'GreatApe',
    'GreatApe2',
    'GreatApe3',
    'GuaranteedCleanup',
    'Hamster',
    'Hamsters',
    'HashCodeFailure',
    'HelloWorld',
    'HiddenArrayList',
    'If1',
    'If2',
    'If3',
    'If4',
    'If5',
    'If6',
    'IfExpression',
    'IfResult',
    'ImmutableAndPlus',
    'ImportClass',
    'ImportEverything',
    'ImportLevel',
    'ImportMultiple',
    'ImportNameChange',
    'ImportPythagorean',
    'InString',
    'IndexIntoString',
    'IndexWithZip',
    'InferInt',
    'Inference',
    'InitSection',
    'InputCheck',
    'IntDivisionTruncates',
    'IntRange',
    'IntRanges',
    'IntegerMath',
    'IntegerOverflow',
    'InterfaceCollision',
    'Invoke',
    'IterateOverString',
    'IterateThroughString',
    'IterationVsMembership',
    'KeyFailure',
    'LambdaIt',
    'LambdaTypeInference',
    'Level',
    'ListCollection',
    'ListOf',
    'Lists',
    'LocalExtensions',
    'LocalFunctions',
    'LogChanges',
    'Maps',
    'MemberImplementations',
    'MemberOperator',
    'MemberVsExtension',
    'MembershipInRange',
    'MembershipUsingBounds',
    'ModelingMI',
    'Modulus',
    'Molecule',
    'MoreReduce',
    'MultipleClassArgs',
    'MultipleExceptions',
    'MultiplyByFour',
    'MultiplyByThree',
    'MultiplyByTwo',
    'MutableList',
    'MutableListIsList',
    'MutableMaps',
    'MutableSet',
    'MutableVariable',
    'NamedAndDefaultArgs',
    'NamedArguments',
    'NamedCompanionObject',
    'NewAngle',
    'NonNullAssert',
    'NonNullAssertCall',
    'NullDereference',
    'NullInMaps',
    'NullableTypes',
    'Num',
    'NumberTypes',
    'ObjectCounter',
    'ObjectFunctions',
    'ObjectInheritance',
    'ObjectKeyword',
    'ObjectNesting',
    'ObjectProperty',
    'ObserveAnimals',
    'OneOrTheOther',
    'OperatorPlus',
    'Overflow',
    'Overloading',
    'OverloadingAdd',
    'PairDestructuring',
    'Pairs',
    'ParameterizedReturnTypes',
    'ParameterizedTypes',
    'Pets',
    'PropertyInInterface',
    'Quote',
    'Quoting',
    'RangeMembership',
    'RangeSum',
    'ReadOnlyMaps',
    'RecursiveEnumImport',
    'Reduce',
    'References',
    'RegularClasses',
    'RemoveDuplicates',
    'RemoveNulls',
    'RepeatThreeTimes',
    'ST',
    'SafeCall',
    'SafeOperation',
    'SayHello',
    'SealedClasses',
    'Sets',
    'Simple',
    'SimpleHashing',
    'SimpleMap',
    'SmartCasts',
    'SpreadOperator',
    'StateOfAClass',
    'StrTemplates',
    'StrangeQuote',
    'StringConcatenation',
    'StringHashCode',
    'StringInvoke',
    'StringIsNullOr',
    'StringPlusNumber',
    'StringRange',
    'StringTemplates',
    'SumUsingRange',
    'Surrey',
    'Swearing',
    'TDDFail',
    'TDDStillFails',
    'TDDWorks',
    'Temperature',
    'TestingExample',
    'ThreeQuotes',
    'TicTacToe',
    'Toss',
    'TripleQuotes',
    'TrueOrFalse',
    'Truncation',
    'TryFinally',
    'Tuple',
    'TwoArgLambda',
    'TwoFunctionsWithVarargs',
    'Types',
    'Unexpected',
    'UnitReturn',
    'UnitReturnType',
    'UnpredictableHashing',
    'UseALibrary',
    'UsingAtomicTest',
    'UsingLongs',
    'Vals',
    'ValueFromMap',
    'VarargListMap',
    'VarargSum',
    'VariableArgLists',
    'Vars',
    'VisibleClassArgs',
    'WhenAndSmartCasts',
    'WhenExpressions',
    'WhileLoop',
    'WithDefaultArguments',
    'WithoutDefaultArguments',
    'ZipMap',
    'Zipper'
    ]) {
    doLast {
        println '*** run complete ***'
    }
}
