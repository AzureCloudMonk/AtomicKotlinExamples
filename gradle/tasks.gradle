configurations {
    kotlinRuntime
}

dependencies {
    kotlinRuntime "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
}

def kotlinClassPath = configurations.kotlinRuntime + sourceSets.main.runtimeClasspath

task AbstractClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractClasses.AbstractClassesKt'
}

task Bicycle(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BicycleKt'
}

task Surrey(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SurreyKt'
}

task SurreyWithToString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SurreyWithToStringKt'
}

task AuxiliaryInitialization(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AuxiliaryInitializationKt'
}

task CallingOtherConstructors(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.CallingOtherConstructorsKt'
}

task GreatApe2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.GreatApe2Kt'
}

task Booleans1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans1Kt'
}

task Booleans2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans2Kt'
}

task Booleans3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans3Kt'
}

task EvaluationOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EvaluationOrderKt'
}

task ClassArg(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClassArgKt'
}

task MultipleClassArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleClassArgsKt'
}

task VisibleClassArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VisibleClassArgsKt'
}

task AdjustedControls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AdjustedControlsKt'
}

task ExplicitDelegation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitDelegationKt'
}

task ModelingMultipleInheritance(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModelingMultipleInheritanceKt'
}

task IntRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntRangesKt'
}

task RangeSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeSumKt'
}

task IndexWithZip(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IndexWithZipKt'
}

task ZipMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'combininglistswithzip.ZipMapKt'
}

task Zipper(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ZipperKt'
}

task ObjCounter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects.ObjCounterKt'
}

task ObjectFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects5.ObjectFunctionsKt'
}

task ObjectKeyword(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects2.ObjectKeywordKt'
}

task ObjectProperty(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects4.ObjectPropertyKt'
}

task ObjectsAndFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects.ObjectsAndFunctionsKt'
}

task ThisKeyword(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects1.ThisKeywordKt'
}

task Coffee(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CoffeeKt'
}

task InitSection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'constructors.InitSectionKt'
}

task Animals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnimalsKt'
}

task CopyDataClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CopyDataClassKt'
}

task DataClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dataclasses.DataClassesKt'
}

task DataClassAndHashCode(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dataclasses4.DataClassAndHashCodeKt'
}

task DataClassesWithVars(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dataclasses3.DataClassesWithVarsKt'
}

task Inference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferenceKt'
}

task StringPlusNumber(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringPlusNumberKt'
}

task Types(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TypesKt'
}

task ComputationResult(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ComputationResultKt'
}

task DestructuringAndForLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DestructuringAndForLoopKt'
}

task Pairs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairsKt'
}

task PairsAndDesctructuring(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairsAndDesctructuringKt'
}

task Tuple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TupleKt'
}

task ImportLevel(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.ImportLevelKt'
}

task Level(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.LevelKt'
}

task AssigningAnIf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssigningAnIfKt'
}

task ForLoopIsAStatement(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForLoopIsAStatementKt'
}

task UnitReturnType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnitReturnTypeKt'
}

task BookExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BookExtensionsKt'
}

task MemberVsExtension(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MemberVsExtensionKt'
}

task Quote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'quoting.QuoteKt'
}

task Quoting(type: JavaExec) {
    classpath kotlinClassPath
    main = 'quoting.QuotingKt'
}

task StrangeQuote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrangeQuoteKt'
}

task Declarations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DeclarationsKt'
}

task ExtensionsOnNullableString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExtensionsOnNullableStringKt'
}

task AddingIntToChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AddingIntToCharKt'
}

task ContainsChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ContainsCharKt'
}

task DefiningRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefiningRangesKt'
}

task ForWithCharRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithCharRangeKt'
}

task ForWithRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithRangesKt'
}

task IndexIntoString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IndexIntoStringKt'
}

task IterateOverString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterateOverStringKt'
}

task RepeatThreeTimes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatThreeTimesKt'
}

task SumUsingRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumUsingRangeKt'
}

task MultiplyByFour(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByFourKt'
}

task MultiplyByThree(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByThreeKt'
}

task MultiplyByTwo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByTwoKt'
}

task SayHello(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SayHelloKt'
}

task EmptyProgram(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EmptyProgramKt'
}

task HelloWorld(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HelloWorldKt'
}

task If1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If1Kt'
}

task If2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If2Kt'
}

task If3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If3Kt'
}

task If4(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If4Kt'
}

task If5(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If5Kt'
}

task If6(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If6Kt'
}

task OneOrTheOther(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OneOrTheOtherKt'
}

task TrueOrFalse(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TrueOrFalseKt'
}

task FullyQualify(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FullyQualifyKt'
}

task ImportClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportClassKt'
}

task ImportEverything(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportEverythingKt'
}

task ImportMultiple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportMultipleKt'
}

task ImportNameChange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportNameChangeKt'
}

task ImportPythagorean(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportPythagoreanKt'
}

task GreatApe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'inheritance.GreatApeKt'
}

task Framework(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FrameworkKt'
}

task InterfaceCollision(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InterfaceCollisionKt'
}

task InterfaceMemberImplementations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'interfaces3.InterfaceMemberImplementationsKt'
}

task StateOfAClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StateOfAClassKt'
}

task AssignAnonymous(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssignAnonymousKt'
}

task CallLater(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CallLaterKt'
}

task DisplayDuck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayDuckKt'
}

task DisplayDuckTestable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayDuckTestableKt'
}

task DisplayList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayListKt'
}

task DisplayListWithLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayListWithLambdaKt'
}

task TwoArgAnonymous(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoArgAnonymousKt'
}

task Lists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListsKt'
}

task LocalExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LocalExtensionsKt'
}

task LocalFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LocalFunctionsKt'
}

task ContactMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ContactMapKt'
}

task Maps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MapsKt'
}

task MutableMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableMapsKt'
}

task ReadOnlyMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadOnlyMapsKt'
}

task Cat(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CatKt'
}

task Dog(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DogKt'
}

task Hamster(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HamsterKt'
}

task CharRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CharRangeKt'
}

task FloatingPointRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FloatingPointRangeKt'
}

task InString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InStringKt'
}

task IterationVsMembership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterationVsMembershipKt'
}

task MembershipInRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipInRangeKt'
}

task MembershipUsingBounds(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipUsingBoundsKt'
}

task StringRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringRangeKt'
}

task ColorBlendMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'colorblendmap.ColorBlendMapKt'
}

task ColorBlendTest(type: JavaExec) {
    classpath kotlinClassPath
    main = 'colorblend.ColorBlendTestKt'
}

task NamedAndDefaultArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedAndDefaultArgsKt'
}

task NamedArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedArgumentsKt'
}

task NamedArgumentsOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedArgumentsOrderKt'
}

task GettingValueFromMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GettingValueFromMapKt'
}

task NonNullAssertedCalls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertedCallsKt'
}

task NonNullAssertion(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertionKt'
}

task Dereference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceKt'
}

task ExplicitCheck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitCheckKt'
}

task NullableAndNonnullTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableAndNonnullTypesKt'
}

task NullInMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullInMapsKt'
}

task BiggestLong(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BiggestLongKt'
}

task BMI(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BMIKt'
}

task InferInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferIntKt'
}

task IntDivisionTruncates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntDivisionTruncatesKt'
}

task IntegerMath(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntegerMathKt'
}

task IntegerOverflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntegerOverflowKt'
}

task Modulus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModulusKt'
}

task UsingLongs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingLongsKt'
}

task MoreReduce(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MoreReduceKt'
}

task Reduce(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReduceKt'
}

task SimpleMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleMapKt'
}

task Sum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumKt'
}

task Overloading(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingKt'
}

task OverloadingAdd(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingAddKt'
}

task WithDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WithDefaultArgumentsKt'
}

task WithoutDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WithoutDefaultArgumentsKt'
}

task GreatApe3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GreatApe3Kt'
}

task ParameterizedReturnTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ParameterizedReturnTypesKt'
}

task ParameterizedTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ParameterizedTypesKt'
}

task Cup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CupKt'
}

task Cup2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Cup2Kt'
}

task DefaultAccessors(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefaultAccessorsKt'
}

task Hamsters(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.HamstersKt'
}

task LoggingChange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LoggingChangeKt'
}

task MyClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.MyClassKt'
}

task PropertyInInterface(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.PropertyInInterfaceKt'
}

task DifferentReferencesToList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DifferentReferencesToListKt'
}

task MutableList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableListKt'
}

task MutableListIsList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableListIsListKt'
}

task AnUnchangingVar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnUnchangingVarKt'
}

task ChangingAVal(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ChangingAValKt'
}

task References(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReferencesKt'
}

task DoWhileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DoWhileLoopKt'
}

task WhileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhileLoopKt'
}

task ChainedSafeCalls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ChainedSafeCallsKt'
}

task DereferenceNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceNullKt'
}

task ElvisOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ElvisOperatorKt'
}

task SafeCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SafeCallKt'
}

task RegularClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'regularClasses.RegularClassesKt'
}

task SealedClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SealedClassesKt'
}

task GardenGnome(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GardenGnomeKt'
}

task MutableSet(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableSetKt'
}

task RemoveDuplicates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RemoveDuplicatesKt'
}

task Sets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SetsKt'
}

task ExpressionInStringTemplate(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExpressionInStringTemplateKt'
}

task StringConcatenation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringConcatenationKt'
}

task StringTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringTemplatesKt'
}

task TripleQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TripleQuotesKt'
}

task BasicFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BasicFunctionsKt'
}

task Booleans(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BooleansKt'
}

task IfExpression(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfExpressionKt'
}

task IfResult(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfResultKt'
}

task IntRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntRangeKt'
}

task IterateThroughString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterateThroughStringKt'
}

task NumberTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberTypesKt'
}

task Overflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverflowKt'
}

task RangeMembership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeMembershipKt'
}

task StrTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrTemplatesKt'
}

task ThreeQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ThreeQuotesKt'
}

task Truncation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TruncationKt'
}

task UnitReturn(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnitReturnKt'
}

task ClassBodies(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClassBodiesKt'
}

task ListCollection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListCollectionKt'
}

task Temperature(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TemperatureKt'
}

task TicTacToe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TicTacToeKt'
}

task UseALibrary(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UseALibraryKt'
}

task UsingAtomicTest(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingAtomicTestKt'
}

task TDDFail(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing1.TDDFailKt'
}

task TDDStillFails(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing2.TDDStillFailsKt'
}

task TDDWorks(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing3.TDDWorksKt'
}

task TestingExample(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TestingExampleKt'
}

task ListOf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListOfKt'
}

task SpreadOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SpreadOperatorKt'
}

task TwoFunctionsWithVarargs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoFunctionsWithVarargsKt'
}

task VarargSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarargSumKt'
}

task VariableArgLists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VariableArgListsKt'
}

task MutableVariable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableVariableKt'
}

task Vals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ValsKt'
}

task Vars(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarsKt'
}

task Cookie(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CookieKt'
}

task ObserveAnimals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObserveAnimalsKt'
}

task WhenExpressions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhenExpressionsKt'
}

task WhenExpressionAndSmartCasts(type: JavaExec) {
    classpath kotlinClassPath
    main = 'whenexpressionscasts.WhenExpressionAndSmartCastsKt'
}

